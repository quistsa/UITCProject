<!DOCTYPE html>
<html lang="en">
<head>
	<title>Grand Valley State University Faculty Page</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width-device-width, initial-scale=1">
	<link rel="icon" href="favicon.ico">
	<link rel="stylesheet" href="styles/style.css">
</head>

<body>	
		<!-- Main Area -->
		<main class="content">
				
			<div class="wrapper">
				
				<h1 class="center">GVSU School of Computing Course Listing</h1> 

				<h3>Course Search for <%=user.fName%> <%=user.lName%></h3>

				<p class="center"> <%= rankKey.desc %> </br> <%= desKey.desc %> </p>

				<!--dummy frame for submitting forms without redirecting-->
				<iframe name="dummyframe" id="dummyframe" style="display: none;"></iframe>

					<table class="table" id="dataTable"><!--Start Table -->
							<tr class = "table-primary">
								<th class="center" id="underline" onclick="sortTable(0)">Course Number</th>
								<th id="underline" onclick="sortTable(1)">Ranking</th>
								<th id="underline" onclick="sortTable(2)">Desire</th>
								<th>Notes</th>
							</tr>

							<% let numbers = 0; %>

							<% courses.forEach(course => { %>
								<% let score = scoreObj; %>
								<% score.facultyID = user.userID; %>
								<% score.courseID = course.courseID; %>
								<% if (scores != null) { %>
									<% scores.forEach(scoreSel => { %>
										<% if (scoreSel.courseID == course.courseID) { %>
											<% score = scoreSel; %>
										<% } %>
									<% }); %>
								<% } %>

								<% 
									if (score.id) {
										submitLabel = "Update Score";
										route = `/scores/${score.id}`;
										edit = true;
									} else {
										submitLabel = "Add Score";
										route = "/scores";
										edit = false;
									}
								%>
								<form name="<%=route%>" action="<%=route%>" target="dummyframe" accept-charset="UTF-8" method="post" class="form">
									<tr>
										<td class="center"><b><%= course.courseID %></b><br><%= course.name %></td>
										<td><input type="text" id="score_ranking" name="score[ranking]" value="<%=score.ranking%>" class="form-control w-50" placeholder="0-3"/></td>
										<td><input type="text" onblur="save('<%=route%>', '<%=numbers%>')" id="score_desire" name="score[desire]" value="<%=score.desire%>" class="form-control w-50" placeholder="0-3"/></td>	
										<td><input type="text" onblur="save('<%=route%>', '<%=numbers%>')" tabindex="-1" id="score_notes" name="score[notes]" value="<%=score.notes%>" class="form-control" placeholder="Notes"/></td>
									</tr>
									<% numbers++; %>
									<input type="hidden" id="score_facultyID" name="score[facultyID]" value="<%=user.userID%>">
									<input type="hidden" id="score_courseID" name="score[courseID]" value="<%=course.courseID%>">
								</form>
							<% }); %>
					</table><!-- End Table -->
			</div>		
		</main> 			
</body>

   <!--Bootstrap Imports-->
   <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
   <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script> 
   
   <script>

	//function to save form automatically on focus loss for desire and notes field
	function save(path, numbers) {
		console.log("here");
		var rankingInputs = document.getElementsByName("score[ranking]");
		var desireInputs = document.getElementsByName("score[desire]");

		if (rankingInputs[numbers].value && rankingInputs[numbers].value >= 0 && rankingInputs[numbers].value <= 3) {
			if (desireInputs[numbers].value && desireInputs[numbers].value >= 0 && desireInputs[numbers].value <= 3) {
				document.forms[path].submit();
			} else {
				alert("Desire field is required and must be between 0-3.");
			}
		} else {
			alert("Ranking field is required and must be between 0-3.");
		}
	}

	//rules for sortable table for ranking and desire
	function sortTable(n) {
				var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
				table = document.getElementById("dataTable");
				switching = true;
				//Set the sorting direction to ascending:
				dir = "asc"; 
				/*Make a loop that will continue until
				no switching has been done:*/
				while (switching) {
					//start by saying: no switching is done:
					switching = false;
					rows = table.rows;
					/*Loop through all table rows (except the
					first, which contains table headers):*/
					for (i = 1; i < (rows.length - 1); i++) {
					//start by saying there should be no switching:
					shouldSwitch = false;
					/*Get the two elements you want to compare,
					one from current row and one from the next:*/
					x = rows[i].getElementsByTagName("td")[n];
					y = rows[i + 1].getElementsByTagName("td")[n];
					 /*check if the two rows should switch place,
					based on the direction, asc or desc:*/
					if (dir == "asc") {
						if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
						//if so, mark as a switch and break the loop:
						shouldSwitch= true;
						break;
						}
					} else if (dir == "desc") {
						if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
						//if so, mark as a switch and break the loop:
						shouldSwitch = true;
						break;
						}
					}
					}
					if (shouldSwitch) {
					/*If a switch has been marked, make the switch
					and mark that a switch has been done:*/
					rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
					switching = true;
					//Each time a switch is done, increase this count by 1:
					switchcount ++;      
					} else {
					/*If no switching has been done AND the direction is "asc",
					set the direction to "desc" and run the while loop again.*/
					if (switchcount == 0 && dir == "asc") {
						dir = "desc";
						switching = true;
					}
					}
				}
				}

   </script>

<style>
	/* CSS Reset */
	body, header, main, img, h1, caption, td, th, tr, table, button {
	margin: 0; padding: 0; border: 0;
	}
  
	#underline {
		text-decoration: underline;
	}

	/*Styles for All Pages */
	body {
	height: 100%;
	margin: 5em;
	padding: 3em 0;
	display: grid;
	align-items: center;
	background-color: #F5F5F5;
	font-family: 'Quicksand', sans-serif;
	}
  
	h1, caption { 
	padding: 1em;
	color: #0032A0;
	font-family: 'Quicksand', sans-serif;	
	}
  
	h1 {
	size: .5em;
	}  
	
	.content p {
	border: 8px solid; 
	border-color: #b0c4de; 
	border-radius: 10px; 
	padding: 1em; 
	margin: 2em; 
	font-size: 1.25em; 
	text-align: center;
	}
  
	/*centering the banner and center command*/
	.center {
	display: block;
	margin-left: auto;
	margin-right: auto;
	text-align: center;
	} 
  
	/*centering the page and creating a width for page*/
	.wrapper {
	width: 90%;
	margin-left: auto;
	margin-right: auto;
	}
  
	/*Button*/
	button{
	text-align: right; 
	}
  
	/*button itself*/
	.dropbtn {  
	background-color: #FFF0F5; 
	font-size: 16px;
	border: none;
	}
	/*centering dropdown*/
	.dropdown { 
	position: relative;
	display: inline-block;
	}
  
	/*content inside the dropdown*/
	.dropdown-content { 
	display: none;
	position: absolute;
	background-color: #FFFFFF;
	min-width: 200px; 
	}

	.dropdown-content a { 
	color: black;
	padding: 12px 16px;
	text-decoration: none;
	display: block;
	}
  
	.left{
	display: block;
	float: left;
	}
  
	.right {
	display: block;
	float: right;
	}
    
	caption {
	font-size: 1.8em; 
	font-weight: bold;  
	}
   
	li{
	padding: 0;
	margin: 0;
	}
  
	input[type=text], select {
	padding: 12px 20px;
	margin: 8px 0;
	display: block;
	border: 1px solid #ccc;
	border-radius: 4px;
	box-sizing: border-box;
	}
  
	.errorCodeH1 {
	Text-align: center;
	Font-size: 200px;
	Font-weight: bold;
	}
	
	.errorCodeH2 {
	Text-align: center;
	Font-size: 75px;
	}
	
	.errorCodeP {
	Text-align: center;
	Font-size: 30px;
	}
  
</style>

</html>